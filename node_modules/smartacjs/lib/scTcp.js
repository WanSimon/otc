/**
 * Created by kay on 2016/4/12.
 */
var net = require('net');
var Promise = require('bluebird');


exports.createTcpServer = function (host, port) {
    getPortAvailable(port)
        .then(function (_port) {
            net.createServer(function (sock) {
                console.log('CONNECTED: ' + sock.remoteAddress + " : " + sock.remotePort);

                sock.on('data',function(data){
                    console.log('DATA'+sock.remoteAddress +":" +data);
                    sock.write('You said "'+data+'"');
                });
                sock.on('close', function (data) {

                })
                sock.on('connect', function (data) {
                    sock.write('server write');
                })
            }).listen(_port, host);
            return _port;
        })
};


exports.createTcpClient = function (host, port) {
    var client = new net.Socket();
    client.connect(port, host);

    client.on('data', function (data) {
        console.log('be received:' + data);
    });

    client.on('error', function (exception) {
        console.log('socket error:' + exception);
    });
};

/**
 * 获取到可用的端口
 * @param port 起始端口号
 * @returns {bluebird|exports|module.exports}
 */
function getPortAvailable(port) {
    return new Promise(function (resolve, reject) {
        IsPortOccupied(port)
            .then(function (result) {
                if (result) {
                    port += 1;
                    resolve(getPortAvailable(port));
                } else {
                    resolve(port)
                }
            })
            .catch(function (err) {
                port += 1;
                resolve(getPortAvailable(port));
            })
    })
}
/**
 * 检测端口是否被占用
 * @param port 端口
 */
function IsPortOccupied(port) {
    return new Promise(function (resolve, reject) {
        var server = net.createServer().listen(port);
        var calledOnce = false;
        var timeoutRef = setTimeout(function () {
            calledOnce = true;
            resolve(true)
        }, 2000);
        timeoutRef.unref();

        server.on('listening', function() {
            clearTimeout(timeoutRef);
            if (server) {
                server.close();
            }
            if (!calledOnce) {
                calledOnce = true;
                resolve(false)
            }
        });
        server.on('error', function(err) {
            clearTimeout(timeoutRef);
            var result = false;
            if (err.code === 'EADDRINUSE') {
                result = true;
            }
            if (!calledOnce) {
                calledOnce = true;
                resolve(result)
            }
        })
    })
}







