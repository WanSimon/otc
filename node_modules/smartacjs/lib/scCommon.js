/**
 * Copyright © 2015 Smartac Inc. All rights reserved.
 * Created by Simon on 2015/9/16.
 */
var fs = require('fs');
var cluster = require('cluster');
var path = require('path');
var g_app = {};
var uuid = require('node-uuid');
var os = require('os');
var crypto=require('crypto');
exports.Promise = require('bluebird');
var sprintf = require("./sprintf");
//exports.underTemplate = require('underscore').template;
//exports._extend = require('underscore').extend;
//exports._ = require('underscore');
exports.request = require('request');
var workers = {};

// 是否cluster模式
exports.isCluster = process.argv.indexOf('-s') === -1;
// 是否调试状态标记
exports.isDebug = process.argv.indexOf('-d') !== -1;
// 是否测试标记
exports.isTest = process.argv.indexOf('--test') !== -1;
// 调试模式自动关闭cluster模式
if (exports.isDebug) exports.isCluster = false;
// 主进程标记
exports.isMaster = cluster.isMaster;
// CPU核心数量
exports.numCPUs = require('os').cpus().length;
if (exports.isTest) {
    exports.numCPUs = 1;
}
else {
    // 集群启动数量控制
    if (exports.numCPUs < 2) exports.isCluster = false;
}
// 操作系统
exports.osType=os.type();// Linux,Windows
// 工作线程索引,主进程-1,子进程0~numCPUs-2
exports.workIndex = -1;
if (cluster.isWorker) {
    exports.workIndex = parseInt(process.env.sc_worker_index);
}
// 使用默认参数启动dump记录
exports.isRecordDump = (process.argv.indexOf('-dump') !== -1);

// 启动函数
exports.runMain = function (main, confFile) {
    appInit(confFile);
    // 初始化日志系统
    setLogger(g_app.conf.logLevel, g_app.conf.logFile);

    // 单核模式:同时调用main和master
    // 多核模式:主仅调用master,子仅调用main
    if (exports.isCluster)// 主进程&&多核模式
    {
        if (exports.isMaster) {
            //主进程
            // 初始化多核日志隧道
            // 建立TCP连接通道
            exports.log.initSocket(true).then(function (port) {
                console.info("master log channel started!port=%d", port);
                var workerCount = exports.numCPUs - 1;
                //开启多核
                // for (var i = 0; i < workerCount; i++)
                // {
                //     try
                //     {
                //         var worker = cluster.fork({sc_log_port: port,sc_worker_index:i});
                //         worker.index=i;
                //         workers[i] = worker;
                //         console.info("start worker success,pid=%s(%d#)",worker.process.pid, i);
                //     }
                //     catch(e)
                //     {
                //         console.error("start worker fail(1)!err=%s",e);
                //     }
                // }
                cluster.on('error', function (err) {
                    console.error('cluster error.err=%s', err);
                })
                cluster.on('exit', function (worker) {
                    console.warn('worker %X(%d#) died.', worker.process.pid, worker.index);
                    worker.exit = true;
                });
                cluster.on("death", function (worker) {
                    console.warn('worker %X(%d#) death. restart...', worker.process.pid, worker.index);
                    worker.exit = true;
                });
                // 每1秒检查一次子进程状态
                setInterval(function () {
                    for (var i = 0; i < workerCount; i++) {
                        var w = workers[i];
                        if (!w || w.exit) {
                            try {
                                console.warn("try restart worker %d# ...", i);
                                w = cluster.fork({sc_log_port: port, sc_worker_index: i});
                                w.index = i;
                                console.info("start worker success,pid=%X(%d#)", w.process.pid, i);
                                workers[i] = w;
                                break;
                            }
                            catch (e) {
                                console.error("restart worker %d# fail!err=%s", i, e);
                            }
                        }
                    }
                }, 1000);
                // 启动master过程
                if (typeof(g_app.master) === 'function') {
                    try {
                        g_app.master();
                    }
                    catch (e) {
                        console.error('run app.master crash!err=%s', e);
                        process.exit(5);
                    }
                }
            }).catch(function (err) {
                console.info("master log channel start fail! err=%s", err);
                process.exit(6);
            });

        }
        else {
            try {
                // 获取端口
                var port = parseInt(process.env.sc_log_port);
            }
            catch (e) {
                console.error("parse sc_log_port fail!!error=%s", e);
                process.exit(4);
                return;
            }
            //process.exit(120);
            //return;
            exports.log.initSocket(false, port, true).then(function () {
                // 连接已经建立,开始主进程
                main();
            }).catch(function (err) {
                console.error("init logger fail!(2),err=%s", err.stack);
                process.exit(4);
            });
        }
    }
    else //单核模式
    {
        main();
        // 启动master过程
        if (typeof(g_app.master) === 'function') {
            try {
                g_app.master();
            }
            catch (e) {
                console.error('run app.master crash!err=%s', e);
                process.exit(5);
            }
        }
    }
    if (exports.isRecordDump) {
        exports.startRecordDump();
    }
};
process.on('error', function (err) {
    console.error("process error,err=%s", err);
});
exports.defaultLogFilePath = function (type) {
    var logPath = os.type() === "Linux" ? "/var/log/sc/node/" : "$(CurrentDirectory)/../log/";
    return logPath + type + "_$(Year4)$(Month2)$(Day2)_$(FileNumber2).log";
};
exports.defaultLogFilePathByDay = function (type) {
    var logPath = os.type() === "Linux" ? "/var/log/sc/node/" : "$(CurrentDirectory)/../log/";
    return logPath + type + "_$(Year4)$(Month2)$(Day2).log";
};
// 初始化应用
var appInit = function (confFile) {
    if (confFile === undefined) confFile = formatString('$(CurrentDirectory)conf.js');
    try {
        if (confFile !== null) {
            g_app.conf = require(confFile);
            if (!g_app.conf.logLevel) g_app.conf.logLevel = "debug";
        }
        else {
            // 启用默认配置
            g_app.conf = {
                logLevel: "debug",
                logFile: null
            }
        }
        // simon add 2016-08-29 程序类型必须设定
        exports.assert(typeof(g_app.programType) === 'string', "unknow program_type!");
        // simon add 2016-08-29 文件日志默认启用状态
        if (g_app.conf.logFile === null || g_app.conf.logFile === undefined) {
            if (!g_app.conf.logPath) {
                g_app.conf.logPath = os.type() === "Linux" ? "/var/log/sc/node/" : "$(CurrentDirectory)/../log/";
            }
            g_app.conf.logFile = g_app.conf.logPath + g_app.programType + "_$(Year4)$(Month2)$(Day2)_$(FileNumber2).log";
            console.log("log file:%s", g_app.conf.logFile);
        }
        if (!g_app.conf.logLevel) g_app.conf.logLevel = "debug";
        console.log("log level:%s", g_app.conf.logLevel);

        // simon add 2016-08-29 实例名默认:[主机名].[程序类型]
        if (!g_app.conf.instanceName) {
            g_app.conf.instanceName = os.hostname() + "." + g_app.programType;
        }
        var sigintCount = 0;
        // 设定中断捕捉
        if (!exports.isDebug && exports.isMaster) {
            process.on('SIGINT', function () {
                sigintCount++;
                if (sigintCount === 1) {
                    console.warn("recv 'Ctrl+C' break sign!next exit!");
                }
                else {
                    console.warn("recv 'Ctrl+C' break sign!EXIT!!");
                    process.exit(0);
                }
            });
        }
        return g_app;
    }
    catch (e) {
        console.error("Init app error! %s", e.stack);
        process.abort();
    }
}
/**
 * 初始化日志
 * @param level 日志级别
 * @param file 文件目录
 */
var setLogger = function (level, file) {
    if (exports.log) {
        return;
    }
    if (!level) level = "debug";
    var scLog;
    try {
        scLog = require('./scLog');
    } catch (e) {
        console.error("cann't find module scLog!error=%s", e);
        process.exit(5);
    }
    var log = new scLog();
    exports.log = log;
    log.setLevel(level);
    if (file) {
        //创建并打开文件日志
        log.enableFileLog(file);
    }
    // 替换控制台
    if (log && console.error !== log.error) {
        console.error = makeFunc(log, log.error);
        console.warn = makeFunc(log, log.warn);
        console.info = makeFunc(log, log.info);
        console.debug = makeFunc(log, log.debug);
        console.log = makeFunc(log, log.trace);
    }
};
exports.setLogger = setLogger;

// APP对象
exports.app = function () {
    return g_app;
};
// 退出进程
exports.exit = function (code, msg) {
    if (msg) {
        var args = Array.prototype.slice.call(arguments);
        args.shift();// 踢掉code
        msg = exports.formatArgs(args);
        console.warn(msg);
    }
    process.exit(code);
};
////////---------------辅助
// 创建函数包装，
// makeFunc([thisArg],fun,arg1,arg2,arg3)
// thisArg可以不填，则不会使用this调用
// 调用时参数顺序为，定义时参数+调用时参数
var makeFunc = function () {
    var args = Array.prototype.slice.call(arguments);
    if (args.length > 1) {
        var thisArg = null;
        if (typeof(args[0]) === "object") thisArg = args.shift();
        if (typeof(args[0]) !== "function") return new Error("miss function parameter")
        var func = args.shift();
        return function () {
            return func.apply(thisArg, args.concat(Array.prototype.slice.call(arguments)));
        };
    }
    return new Error("miss parameter")
};
exports.makeFunc = makeFunc;

// 断言
exports.assert = function (cond, msg) {
    if (!exports.isDebug) return;
    if (!cond) {
        console.error("assert fail!msg=%s", msg);
        console.trace();
        process.kill(process.pid);
    }
};
////PB编码器
exports.createPBEncoder = function (file, ns, msg) {
    var pb = require('./scProtoBuff');
    file = path.normalize(file);
    return pb.create(file, ns, msg);
};
// 获取工作进程句柄
exports.getWorker = function (index) {
    return workers[index];
};
// 非调试状态,启用全局异常捕获
if (!exports.isDebug) {
    process.on('uncaughtException', function (err) {
        console.error('Global caught exception: %s', err.stack);
    });
}
// 全局Promise拒绝捕获
process.on('unhandledRejection', (reason, p) => {
    let r=reason;
    if (r.stack)r=r.stack;
    console.error("Unhandled Rejection at:%s",r);
    // application specific logging, throwing an error, or other logic here
});
// 获取RabbitMQ库
exports.RabbitMQ = function () {
    try {
        return require("./scRabbit");
    } catch (e) {
        console.error("cann't load scRabbit.js!,err=%s", e);
    }
};

//获取Redis
exports.Redis2 = function () {
    try {
        return require("./scRedis2");
    } catch (e) {
        console.error("cann't load scRedis2.js!error=%s", e);
    }
}

// 创建命名日志
exports.createNamedLog = function (module, name, obj) {
    return require('./scNamedLog.js').create(module, name, obj);
}

// 获取指定对象的子对象,通过指定的对象路径
exports.getSubObject = function (obj, path) {
    if (!obj || !path) {
        return undefined;
    }
    var paths = path.split(".");
    for (var i = 0; i < paths.length; i++) {
        var p = paths[i];
        obj = obj[p];
        if (!obj) return undefined;
    }
    return obj;
}
// 寻找子对象实例
exports.findSubObjectInstance = function (obj, className, depth) {
    var result = [];
    if (depth === undefined) depth = 5;
    if (obj && typeof(obj) === 'object' && depth > 0) {
        for (var k in obj) {
            if (obj[k] && typeof(obj[k]) === 'object') {
                if (typeof(obj[k].constructor) === 'function' && obj[k].constructor.name === className) {
                    result.push(obj[k]);
                }
                else {
                    var sub = exports.findSubObjectInstance(obj[k], className, depth - 1);
                    if (sub.length > 0) result = result.concat(sub);
                }
            }
        }
    }
    return result;
}
// 对象深拷贝
exports.deepCopy = function (obj) {
    var o, i, j, k;
    if (typeof(obj) !== "object" || obj === null)return obj;
    if (obj instanceof Array) {
        o = [];
        i = 0;
        j = obj.length;
        for (; i < j; i++) {
            if (obj[i] instanceof Date) {
                o[i] = new Date(obj[i]);
            }
            else if (typeof(obj[i]) === "object" && obj[i] !== null) {
                o[i] = arguments.callee(obj[i]);
            }
            else {
                o[i] = obj[i];
            }
        }
    }
    else {
        o = {};
        for (i in obj) {
            if (obj[i] instanceof Date) {
                o[i] = new Date(obj[i]);
            }
            else if (typeof(obj[i]) === "object" && obj[i] !== null) {
                o[i] = arguments.callee(obj[i]);
            }
            else {
                o[i] = obj[i];
            }
        }
    }
    return o;
};
exports.deepCopy2 = function (obj1, obj2) {
    if (typeof(obj1) !== "object" || obj1 === null)return;
    if (typeof(obj2) !== "object" || obj2 === null)return;
    for (var k in obj2) {
        obj1[k] = exports.deepCopy(obj2[k]);
    }
};
// 多级对象转为一级对象
function convertObjectToKVObject(obj,prefix,result){
    if (!prefix) prefix="";
    if (!result) result={};
    if (obj instanceof Array){
        for (let i=0;i<obj.length;i++){
            convertObjectToKVObject(obj[i],prefix+"."+i+".",result);
        }
    }else if (typeof(obj)==="object"){
        for(let k in obj){
            if (obj.hasOwnProperty(k)){
                convertObjectToKVObject(obj[k],prefix+"."+k,result);
            }
        }
    }else{
        if (prefix.length>0 && prefix[0]===".") prefix=prefix.substr(1);
        result[prefix]=obj;
    }
    return result;
}
exports.convertObjectToKVObject=convertObjectToKVObject;
/**
 * 获得uuid
 * @returns {*}
 */
var guid = function () {
    return uuid.v4();
}
exports.guid = guid;

var guid22 = function () {
    //生成24位guid
    var guid = new Buffer(uuid.v4('binary')).toString('base64');
    //转成base64，最后两位都是＝＝，所以截取掉。  并且替换特殊字符串
    return guid.replace(/\//g, '_').replace(/\+/g, '-').substring(0, 22);
}
exports.guid22 = guid22;
exports.guid32=function(){
    return uuid.v4().replace(/-/g, '');
};
// sprintf方法
exports.sprintf = sprintf;
// 获取数据库模块
exports.db = function () {
    return require("./scMysql");
}
// 获取SQLite模块
exports.sqlite = function () {
    try {
        return require("./scSQLite");
    }
    catch (e) {
        console.error("require sqlite fail!err=%s\nplase execute command: \nnpm install sqlite3 -g", e);
        process.exit(104);
    }
}

//获取mongoose模块
exports.mongoose = function () {
    return require('./scMongoose');
}

Date.prototype.format = function (fmt) { //author: meizz
    var o = {
        "M+": this.getMonth() + 1,                 //月份
        "d+": this.getDate(),                    //日
        "h+": this.getHours(),                   //小时
        "m+": this.getMinutes(),                 //分
        "s+": this.getSeconds(),                 //秒
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度
        "S": exports.sprintf('%03d', this.getMilliseconds())             //毫秒
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}
if (!Array.indexOf) {
    Array.prototype.indexOf = function (obj) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] === obj) {
                return i;
            }
        }
        return -1;
    }
}
/**
 * 替换字符串内容
 * @param str
 * @returns {*}
 */
function formatString(s) {
    return s.replace(/(\$\([^$()]*\))/g, function (str) {
        if (str === '$(Year)' || str === '$(Year4)') {
            return new Date().format('yyyy');
        } else if (str === '$(Year2)') {
            return new Date().format('yy');
        } else if (str === '$(Month)') {
            return new Date().format('M');
        } else if (str === '$(Month2)') {
            return new Date().format('MM');
        } else if (str === '$(Day)') {
            return new Date().format('d');
        } else if (str === '$(Day2)') {
            return new Date().format('dd');
        } else if (str === '$(Hour)') {
            return new Date().format('h');
        } else if (str === '$(Hour2)') {
            return new Date().format('hh');
        } else if (str === '$(Minute)') {
            return new Date().format('m');
        } else if (str === '$(Minute2)') {
            return new Date().format('mm');
        } else if (str === '$(Second)') {
            return new Date().format('s');
        } else if (str === '$(Second2)') {
            return new Date().format('ss');
        } else if (str === '$(Millisecond)') {
            return new Date().format('S').substring(1);
        } else if (str === '$(Millisecond3)') {
            return new Date().format('S');
        } else if (str === '$(ProcessID)' || str === '$(PID)') {
            //进程id
            return process.pid;
        } else if (str === '$(ParentProcessID)' || str === '$(PPID)') {
            //父进程id
            return process.pid;
        } else if (str === '$(CurrentDirectory)') {
            //当前目录，程序启动目录
            return path.normalize(process.cwd() + path.sep);
        } else if (str === '$(TemporaryDirectory)') {
            //临时目录
            return path.normalize(os.tmpdir() + path.sep);
        } else if (str === '$(GUID)' || str === '$(GUID36)') {
            return uuid.v4();
        } else if (str === '$(GUID32)') {
            return uuid.v4().replace(/-/g, '');
        } else if (str === '$(ProgramType)') {
            return g_app.programType;
        } else if (str === '$(WorkIndex)') {
            return exports.workIndex.toString();
        }
        else return str;
    });
}

exports.formatString = formatString;


String.prototype.format = function () {
    if (arguments.length === 0) {
        return this;
    }
    for (var StringFormat_s = this, StringFormat_i = 0; StringFormat_i < arguments.length; StringFormat_i++) {
        StringFormat_s = StringFormat_s.replace(new RegExp("\\{" + StringFormat_i + "\\}", "g"), arguments[StringFormat_i]);
    }
    return StringFormat_s;
};
// 格式化参数数组为字符串
exports.formatArgs = function (args) {
    if (!(args instanceof Array)) return "";
    var result = "";
    // 转换对象为字符串形式
    for (var i = 0; i < args.length; i++) {
        if (typeof(args[i]) === 'object') {
            if (args[i] instanceof Error) {
                // simon 20160406 如果错误有堆栈信息,则优先输出堆栈
                if (typeof(args[i].stack) === 'string') args[i] = args[i].stack;
                else args[i] = args[i].toString();
            }
            else {
                args[i] = JSON.stringify(args[i]);
            }
        }
    }
    if (args.length > 1) {
        if (typeof(args[0]) === 'string') {
            result += sprintf.apply(null, args);
        }
        else {
            for (var i = 0; i < args.length; i++) {

                if (i != args.length - 1) result += args[i] + ' ';
                else result += args[i];
            }
        }
    }
    else if (args.length === 1) {
        result += args[0];
    }
    return result;
}
/** 开始记录Dump文件
 * @param minMemory 最小开始记录大小(百分比)
 * @param maxMemory 最大内存使用量,超过则自动重启(百分比)
 * @param interval 执行间隔(秒)
 */
exports.startRecordDump = function (minMemory, maxMemory, interval, file) {
    // 仅允许调用一次
    exports.startRecordDump = function () {
        console.error("record dump already started!");
    };
    if (!minMemory) minMemory = 30;
    if (!maxMemory) maxMemory = 50;
    if (!interval) interval = 5 * 60;
    if (!file) file = "$(CurrentDirectory)$(ProgramType)_$(Year)$(Month2)$(Day2)$(Hour2)$(Minute2)$(Second2)_$(WorkIndex).heapsnapshot";
    try {
        require('heapdump');
    }
    catch (e) {
        console.error("cann't load heapdump,use cmd: 'npm install heapdump' to install it\n%s", e);
        process.exit(54);
    }
    setInterval(function () {
        var mem = process.memoryUsage();
        var used = mem.heapTotal;
//        var total=os.totalmem();
        var total = 1024 * 1024 * 1024;
        var percent = (used * 100 / total).toFixed(2);
        console.info("current heap usage:%d Mb(%d%%)", (used / 1024 / 1024).toFixed(2), percent);
        if (percent > minMemory) {
            var output = formatString(file);
            exports.recordDumpFile(output);
        }
        if (percent > maxMemory) {
            // 停止
            console.error("heap used more than the maximum size.termination!");
            process.exit(123);
        }
    }, interval * 1000);
    console.info("recode dump started!min=%d,max=%d,interval=%d,file=%s", minMemory, maxMemory, interval, file);

}
exports.recordDumpFile = function (file) {
    try {
        console.info("record dump file '%s'...", file);
        var heapdump = require('heapdump');
        // 记录
        heapdump.writeSnapshot(file, function (err) {
            if (err) console.error(err);
            else console.error('Wrote snapshot: ' + file);
        });
    }
    catch (e) {
        console.error("record dump file crash!!err=%s", e);
    }
};
// 获取时间
Date.prototype.fromPB64 = function (t) {
    if (t !== undefined) {
        var type = typeof(t);
        if (type === 'object') {
            return new Date(((t.high * 0x100000000) + t.low) * 1000);
        }
        else {
            return new Date(t);
        }
    }
    return new Date();
}
//递归创建目录 异步方法
exports.mkdirs = function (dirname, mode, callback) {
    fs.exists(dirname, function (exists) {
        if (exists) {
            callback();
        } else {
            exports.mkdirs(path.dirname(dirname), mode, function () {
                console.log("auto create dir:'%s'", dirname);
                fs.mkdir(dirname, mode, callback);
            });
        }
    });
}
//递归创建目录 同步方法
exports.mkdirsSync = function (dirname, mode) {
    if (fs.existsSync(dirname)) {
        return true;
    } else {
        if (exports.mkdirsSync(path.dirname(dirname), mode)) {
            fs.mkdirSync(dirname, mode);
            console.log("auto create dir:'%s'", dirname);
            return true;
        }
    }
}

// http请求
exports.httpRequest=function(url,opt){
    return new Promise(function(resolve, reject){
        let lowUrl=url.toLowerCase();
        let http;
        if (lowUrl.substr(0,5)==="https") http=require('https');
        else http=require('http');
        const URL=require('url');
        let urlObj=URL.parse(url);
        if (opt){
            if (opt.method)urlObj.method=opt.method;
            if (opt.headers)urlObj.headers=opt.headers;
            if (opt.timeout)urlObj.timeout=opt.timeout;
            if (urlObj.method==="POST" && opt.data){
                if (!opt.headers)opt.headers={};
                if (typeof(opt.data)!=='string') opt.data=JSON.stringify(opt.data);
                opt.headers["Content-Length"]=Buffer.byteLength(opt.data);
            }
        }
        let tick=new Date().getTime();
        let req=http.request(urlObj,function(res){
            res.setEncoding('utf8');
            let resBuff="";//new Buffer(0);
            res.on('data', function(chunk){
                //resBuff.write(chunk);
                resBuff+=chunk;
            });
            res.on('end', function(){
                if (res.statusCode===200){
                    console.log("request http success,url=%s duration=%d ms,size=%d",url,new Date().getTime()-tick,resBuff.length);
                    resolve(resBuff.toString());
                    }
                else{
                    console.error("request http fail,status_code=%d,url=%s duration=%d ms,size=%d",res.statusCode,url,new Date().getTime()-tick,resBuff.length);
                    reject(resBuff.toString());
                }
            });
        });
        req.on('error',function(err){
            console.error("request fail!duration=%d ms,url=%s,err=%s",new Date().getTime()-tick,url,err);
            reject(err);
        });
        if (opt && opt.data){
            req.write(opt.data)
        }
        req.end();
    });


};
exports.sha1=function(str){
    let md5sum = crypto.createHash('sha1');
    md5sum.update(str);
    return md5sum.digest('hex');

}
exports.sleep=function(ms){
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve();
        })
    },ms);
};