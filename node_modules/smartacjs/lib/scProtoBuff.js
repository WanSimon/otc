/**
 * Copyright © 2015 Smartac Inc. All rights reserved.
 * Created by Simon on 2015/10/9.
 */

var fs = require('fs');
var g_lstPBMessage=new Array();
var scCommon=require('./scCommon.js')
// PB编码器
function PBEncoder(){
    this._file=null;
    this._ns=null;
    this._msg=null;
    this._msgObject=null;
}
// 初始化
PBEncoder.prototype.init=function(file,ns,msg){
    if (this._file!=null) return false;
    this._file=file;
    this._ns=ns;
    this._msg=msg;
    this._index=file+"->"+ns+"."+msg;
    this._msgObject=g_lstPBMessage[this._index];
    if (this._msgObject==undefined)
    {
        try
        {
            var Message;
            var tmp=file.split(".");
            var end=tmp[tmp.length-1];
            end=end.toLowerCase();
            if (end=="proto"){
                var ProtoBuf = require("protobufjs");
                var userProtoStr = fs.readFileSync(file).toString();
                Message = ProtoBuf.loadProto(userProtoStr).build(ns)[msg];
            }
            else if (end=="json"){
                var ProtoBuf = require("protobufjs");
                var root=ProtoBuf.loadJsonFile(file).build();
                Message=root[ns][msg];
            }
            else if (end=="js")
            {
                // TODO:这里引入的文件不是公共类目录的,可能需要调整目录结构
                require("protobufjs");
                var obj=require(file);
                var msgPath=ns+"."+msg;
                Message=scCommon.getSubObject(obj,msgPath);
            }

            if (!!!Message)
            {
                console.error("PBEncoder.init cann't load protobuff formater!file='%s',ns='%s',msg='%s'",file,ns,msg);
            }
            g_lstPBMessage[this._index]=Message;
            this._msgObject=Message;
            console.info("PBEncoder success load file '%s'",file);
        }
        catch(e)
        {
            console.error("PBEncoder.init load protobuff formater crash!file='%s',ns='%s',msg='%s',error=%s",file,ns,msg,e);
            return false;
        }
    }
    return true;
}
////PB编码
PBEncoder.prototype.encode=function(content){
    if (this._msgObject==undefined)
    {
        console.error("PBEncoder.encode fail!not init!");
        return null;
    }
    try
    {
        var object=content;
        if (typeof(object)=='string') object=JSON.parse(object);
        //console.error("Object=%s",JSON.stringify(object));
        var buff=this._msgObject.encode(object).toBuffer();
        //console.error("Buffer=%s",buff);
        return buff;
    }
    catch(e)
    {
        console.error("PBEncoder.encode '%s' crash!content=%s\nerror=%s,", this._file,JSON.stringify(content),e);
    }
    return null;
}
////PB解码
PBEncoder.prototype.decode=function(buff){
    if (this._msgObject==undefined)
    {
        console.error("PBEncoder.decode fail!not init!");
        return null;
    }
    try
    {
        return this._msgObject.decode(buff,'utf8');
    }
    catch(e)
    {
        console.error("PBEncoder.decode '%s' crash!error=%s", this._file,e);
    }
    return null;
}
// 导出
exports.create=function(file,ns,msg){
    var obj=new PBEncoder();
    if (msg)
    {
        obj.init(file,ns,msg);
    }
    return obj;
}