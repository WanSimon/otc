/**
 * Copyright © 2015 Smartac Inc. All rights reserved.
 * Created by Simon on 2015/12/29.
 */
var sc = require('./scCommon.js');
var app = sc.app();
var mg = require('mongoose');
var Schema = mg.Schema;
var Promise = sc.Promise;
var _ = sc._;
var mgConn = {};

exports.mongooseCreate = function (uri, name, option) {
    if (mgConn[uri]) return mgConn[uri];
    var mgConnection = new MongooseConnection(uri, name, option);
    mgConn[uri] = mgConnection;
    return mgConnection;
}
var g_index = 0;
function MongooseConnection(uri, name, option) {
    //创建日志
    if (!!!name || name == '') {
        name = "MONGO" + g_index;
        g_index++;
    }
    this.log = sc.createNamedLog(name);
    this._name = name;
    this._uri = uri;
    this._conn = mg.createConnection(uri, option);
    var self = this;
    this._conn.on('err', function (err) {
        self.log.error(err);
    })
    this._conn.on('open', function () {
        self.log.info('MongoDB Opened!!!');
    })
    //用于保存table;
    this.mgTalbeList = {};
}

/**
 * 创建Schema
 */
MongooseConnection.prototype.getSchema = function (obj) {
    return new Schema(obj);
}

/**
 * 获取table对象
 * @param name
 * @param schema
 * @returns {null}
 */
MongooseConnection.prototype.getTable = function (name, schema) {
    //如果列表里存在该table，则直接返回
    if (this.mgTalbeList[name]) return this.mgTalbeList[name];
    //判断参数是否缺失
    if (!!!name || !!!schema) {
        this.log.error('GetTable Failed!!!Missing parameter!');
        return null;
    }
    var table = new MongooseTable(this._name, this._conn, name, schema);
    this.mgTalbeList[name] = table;
    return table;
}

/**
 * 初始化表
 * @param conn
 * @param name
 * @param schema
 * @constructor
 */
function MongooseTable(connName, conn, name, schema) {
    this._conn = conn;
    this.log = sc.createNamedLog(connName + name);
    this.name = name;
    this.schema = schema;
    this.model = conn.model(name, schema, name);
}

/**
 * 插入数据方法
 * @param obj 插入数据 单条数据为obj，多条为JSON数组
 * @returns {Promise}
 */
MongooseTable.prototype.insert = function (obj) {
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.create(obj, function (err, doc) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve(doc);
        })
    })
}

/**
 * 表查询方法
 * @param conditions 条件（object）
 *        说明:1. author = 'xc'  写法为 {author:'= xc'}
 *             2. date > 2015-08-01 写法为{date:'> 2015-08-01'}
 *             3. body in ('xx','cc') 写法为 {body: {in: ['xc', 'cc']}};
 *             4. body not in ('xx','cc') 写法为 body: {ne: ['xc', 'cc']}};
 *             5. (title = 'test') or (author = 'cc') 写法为 {or:[{title:'test'},{'author':'cc'}]}
 *             6. title is not null 写法为 {title:{exists:true}};
 * @param projection 查询返回字段,默认返回所有字段(1.需要,_id是默认返回，如果不要显示加上("_id":0)，但是，对其他不需要显示的属性且不是_id，如果设置为0的话将会抛异常或查询无果。)
 *                   例如只查询title字段的写法为   {title: 1, _id: 0}
 * @param options 额外条件
 *                例：只取4条数据(limit)   {limit: 4}
 *                    跳过3条数据(skip)    {skip: 3}
 *                    按照title升序查询(sort:  1.升序 -1.降序) {sort: {title: 1}}
 */
MongooseTable.prototype.find = function (conditions, projection, options) {
    //实际查询的where条件转换
    var where = conditionsReplace(conditions);
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.find(where, projection, options, function (err, doc) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve(doc);
        })
    })
}

/**
 * 查询同find一致，只不过只查出第一条数据
 * @param conditions
 * @param projection
 * @param options
 * @returns {Promise}
 */
MongooseTable.prototype.findOne = function (conditions, projection, options) {
    //实际查询的where条件转换
    var where = conditionsReplace(conditions);
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.findOne(where, projection, options, function (err, doc) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve(doc);
        })
    })
}

/**
 *  它只接收文档的_id作为参数，返回单个文档。
 * @param id
 */
MongooseTable.prototype.findById = function (id, projection, options) {
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.findById(id, projection, options, function (err, doc) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve(doc);
        })
    })
}

/**
 * 数据更新
 * @param conditions 条件
 * @param update 更新内容
 * @param options 额外条件
 *        options说明:   upsert(boolean) 如果查找不到要更新的数据，则会插入一条新的数据(默认为false)
 *                       multi(boolean) 会更新多条数据(默认为false)
 */
MongooseTable.prototype.update = function (conditions, update, options) {
    var where = conditionsReplace(conditions);
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.update(where, update, options, function (err, numberAffected, raw) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve({numberAffected: numberAffected, raw: raw});
        })
    })
}

/**
 * 删除数据
 * @param conditions 删除条件
 * @returns {Promise}
 */
MongooseTable.prototype.delete = function (conditions) {
    var where = conditionsReplace(conditions);
    var self = this;
    return new Promise(function (resolve, reject) {
        self.model.remove(where, function (err) {
            if (err) {
                self.log.error(err);
                return reject(err);
            }
            resolve();
        })
    })
}

/**
 * 条件格式转换
 * @param conditions
 */
function conditionsReplace(conditions) {
    //实际查询的where条件
    var where = {};
    for (var i in conditions) {
        if (conditions[i].indexOf('>= ') > -1) {
            where[i] = {$gte: conditions[i].split('>= ')[1]};
        } else if (conditions[i].indexOf('> ') > -1) {
            where[i] = {$gt: conditions[i].split('> ')[1]};
        } else if (conditions[i].indexOf('<= ') > -1) {
            where[i] = {$lte: conditions[i].split('<= ')[1]};
        } else if (conditions[i].indexOf('< ') > -1) {
            where[i] = {$lt: conditions[i].split('< ')[1]};
        } else if (conditions[i].indexOf('= ') > -1) {
            where[i] = conditions[i].split('= ')[1];
        } else if (conditions[i]['in']) {
            where[i] = {$in: conditions[i]['in']};
        } else if (conditions[i]['ne']) {
            where[i] = {$ne: conditions[i]['ne']};
        } else if (i == 'or') {
            where['$or'] = conditions[i];
        } else if (conditions[i]['exists']) {
            where[i] = {$exists: true};
        }
    }
    return where;
}