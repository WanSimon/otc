/**
 * Copyright © 2015 Smartac Inc. All rights reserved.
 * Created by Simon on 2015/10/30.
 */
var mysql = require('mysql');
var sc = require('./scCommon');
var Promise = require('bluebird');

exports.resetTotal=function()
{
    // 查询执行数
    exports.queryCount=0;
    // 查询执行时间
    exports.queryTimes=0;
    // 连接占用数
    exports.linkOccupy=0;
};
exports.resetTotal();
// 数据库连接对象
function MySQLConnection(dbOption, timeout) {
    this._timeout = timeout;
    //用来记录beginTransaction、commit、rollback次数的
    this._transCount = 0;
    if (!!!this._timeout) this._timeout = 30000;
    if (!!!dbOption) {
        console.error("Create MySQL Connection Failed!Option invalid!!!");
        callback(new Error("Create MySQL Connection Failed!Option invalid!!!"));
    }
    if (dbOption.constructor.name == "PoolConnection") {
        this._object = dbOption;
    }
    else {
        try {
            this._object = mysql.createConnection(dbOption);
            this._object.on('error', function (err) {
                console.error("MySQL Error:%s", err.toString());
            });
        }
        catch (e) {
            console.error("cann't create mysql connection!db options=%s,error=%s", JSON.stringify(dbOption), e);
        }
    }
}

// object转字符串
var convertObjectToSQLStringKV = function (obj, delimiterOP, delimiterEND) {
    // TODO:转换JSON对象为'key[=]val[,]'形式,(用于Where,Update)
    var res = '';
    var end = delimiterEND.trim();
    if (end.indexOf("AND") >= 0) end = " " + delimiterEND.trim() + " ";
    for (var key in obj) {
        // Simon 20160826 增加对日期类型的支持
        if (obj[key] instanceof Date)
        {
            res +=  mysql.escapeId(key) + delimiterOP + mysql.escape(obj[key].format('yyyy-MM-dd hh:mm:ss')) + end;
        }
        else
        {
            res += mysql.escapeId(key) + delimiterOP + mysql.escape(obj[key]) + end;
        }
    }
    if (res.indexOf("AND") > 0) return res.substr(0, res.length - 4);
    else return res.substr(0, res.length - 1);

}
// object转数组
/***
 *
 * @param obj  json对象
 * @param columns  数组
 */
var convertObjectToSQLStringArray = function (obj, columns) {
    // TODO:转换JSON对象为按照给定列排序的字符串(用于Insert)
    var arrayObj = new Array();
    for (var i = 0; i < columns.length; i++) {
        for (var key in obj) {
            if (key == columns[i]) {
                // Simon 20160826 增加对日期类型的支持
                if (obj[key] instanceof Date)
                {
                    arrayObj.push(mysql.escape(obj[key].format('yyyy-MM-dd hh:mm:ss')));
                }
                else
                {
                    arrayObj.push(mysql.escape(obj[key]));
                }
            }
        }
    }
    return arrayObj;
}

// 查询数据库
var query = function (db, sql, timeout, callback) {
    if (!timeout) timeout = 30000;
    try {
        var tick = new Date();
        exports.queryCount++;
        db.query({sql:sql,timeout:timeout}, function (err, results) {
            var now = new Date();
            var timediff = now.getTime() - tick.getTime();
            exports.queryTimes+=timediff;
            if (err == null) {
                if (timediff<5000)
                {
                    console.log("[MySQL]Query success,used time:%d ms,sql=%s", timediff, JSON.stringify(sql));
                }
                else
                {
                    console.warn("[MySQL]Query success(long time),used time:%d ms,sql=%s", timediff, JSON.stringify(sql));
                }
                callback(null, results);
            }
            else {
                console.error("[MySQL]Query error,used time:%d ms,error=%s,sql=%s", timediff, err, JSON.stringify(sql));
                callback(new Error(err));
            }
        });
    }
    catch (e) {
        console.error("query sql error,error=%s", e);
        callback(new Error(e));
    }
}

MySQLConnection.prototype.beginTransaction = function () {
    var self = this;
    return new Promise(function (resolve, reject) {
        self._object.beginTransaction(function (err) {
            if (err) {
                reject(new Error(err))
            } else if (self._transCount > 0) {
                //如果已开启事务，则提示错误
                console.assert(false, "Transaction already began!");
                reject('Has Opened A Transaction!');
            } else {
                //记录
                self._transCount++;
                resolve('beginTransaction');
            }
        });
    })
}

MySQLConnection.prototype.rollback = function () {
    //如果没有开启事务
    if (this._transCount == 0) {
        console.error('Cann\'t rollback ,Please open transaction first!');
        console.assert(false, 'lease open transaction first!');
        return;
    }
    else this._transCount--;
    return this._object.rollback();
}

MySQLConnection.prototype.commit = function () {
    var self = this;
    return new Promise(function (resolve, reject) {
        if (self._transCount == 0) {
            console.error('Cann\'t commit ,Please open transaction first!');
            console.assert(false, 'lease open transaction first!');
            reject('Please open transaction first!');
        } else {
            self._transCount--;
            self._object.commit(function (err) {
                if (err) {
                    reject(new Error(err))
                } else {
                    resolve();
                }
            });
        }
    });
}

// 查询数据库
MySQLConnection.prototype.query = function (sql, timeout) {
    var self = this;
    return new Promise(function (resolve, reject) {
        if (!!!timeout) timeout = this._timeout;
        if (typeof (self._object) != "object") {
            reject(new Error("sql connection object invalid!"));
        } else if (!sql) {
            reject(new Error("sql string invalid!"));
        } else {
            query(self._object, sql, timeout, function (err, msg) {
                if (err) {
                    reject(new Error(err))
                } else {
                    resolve(msg);
                }
            });
        }
    });
}

// 优雅关闭连接
MySQLConnection.prototype.end = function () {
    if (this._object) {
        this._object.end(sc.makeFunc(this, function (err) {
            if (err) {
                console.debug("[MySQL] End connection error:%s", JSON.stringify(err));
            }
            // 优雅关闭,直接销毁
            this._object.destroy();
            this._object = undefined;
        }));
    }
}
// 销毁连接(立即断开连接)
MySQLConnection.prototype.destroy = function () {
    if (this._object) {
        this._object.destroy();
        this._object = undefined;
    }
}

// 释放连接(归还连接池)
MySQLConnection.prototype.release = function () {
    if (this._object && typeof (this._object.release) == "function") {
        console.assert(this._transCount == 0, "transaction operator not end!!");
        if (this.isRelease==false)
        {
            this.isRelease=true;
            this._object.release();
            this._object = undefined;
            exports.linkOccupy--;
            //如果是debug模式 关闭setTimeout
            if (this._timeout) clearTimeout(this._timeout);
            console.log("getConnection release,getIndex=%d",this._getIndex);
        }
    }
}
/*选项
 {
 host     : 'example.org',  // 地址
 user     : 'bob',          // 用户名
 password : 'secret'        // 密码
 connectionLimit:10         // 连接限制
 queueLimit: 0              // 请求连接队列最大数
 acquireTimeout:10          // 获取连接超时
 }
 */
// 数据库连接池编号
var _dbPoolIndex=0;
// 数据库连接池
function MySQLConnectionPool(options, timeout) {
    if (!timeout) timeout = 10000;
    this._timeout=timeout;
    this._object = mysql.createPool(options);
    this.log=sc.createNamedLog("MP"+ ++_dbPoolIndex);
    this._connIndex=0;
    var self=this;
    // 新链接创建
    this._object.on('connection', function (connection) {
        self.log.info('create connection #%d',self._connIndex);
        connection._index=self._connIndex;
        self._connIndex++;
    });
    // 等待获取入队
    this._object.on('enqueue', function () {
        self.log.error('Waiting for available connection slot');
    });
}

/**
 * 执行SQL并自动释放连接
 */
MySQLConnectionPool.prototype.query = function (sql, name) {
    var self = this;
    var conn = '';
    return new Promise(function (resolve, reject) {
        self.getConnection(name)
            .then(function (connection) {
                conn = connection;
                return conn.query(sql);
            })
            .then(function (result) {
                resolve(result);
            })
            .catch(function (err) {
                reject(err);
            })
    }).finally(function () {
        if (conn) conn.release();
    })
}

/**
 * 获取链接
 * @param name 获取链接的目的
 * @returns {bluebird}
 */
var _getIndex=0;
MySQLConnectionPool.prototype.getConnection = function (name,timeout) {
    var self = this;
    if (name===undefined)name="default";
    return new Promise(function (resolve, reject) {
        if (self._object) {
            try {
                // if (!!!timeout) timeout=10000;
                // //如果3s内还没获取到连接，则返回错误；
                // var _getConnTimeout = setTimeout(function () {
                //     return reject('[MySQL] ConnectionPool getConnection timeout!');
                // }, timeout);
                self._object.getConnection(function (err, connection) {
                    // //无论成功与否，先将timeout句柄删除
                    // if (_getConnTimeout) {
                    //     clearTimeout(_getConnTimeout);
                    // };
                    if (err) {
                        self.log.error('get connection fail!name="%s",err="%s"',name,err);
                        reject(err);
                    }
                    else {
                        //return connection;
                        var conn = new MySQLConnection(connection);
                        var getIndex=_getIndex++;
                        conn.isRelease=false;
                        conn._getIndex=getIndex;
                        exports.linkOccupy++;
                        //如果是debug模式，那就开启检测是否release
                        if (sc.isDebug)
                        {
                            name = name || 'no name';
                            function releaseError() {
                                self.log.warn('connection release timeout!name="%s",getIndex=%d',name,getIndex);
                            }

                            //1分钟仍没关闭句柄，则提示释放链接错误
                            conn._timeout = setTimeout(releaseError, 60000);
                        }
                        self.log.log("getConnection success,getIndex=%d",getIndex);
                        resolve(conn);

                    }
                });
            } catch (e) {
                self.log.error("[MySQL] ConnectionPool getConnection crash!,error=%s", e);
                reject(e);
            }
        }
        else {
            self.log.error("[MySQL] ConnectionPool invalid!");
            reject(new Error("[MySQL] ConnectionPool invalid!"));
            //callback(new Error("[MySQL] ConnectionPool invalid!"));
        }
    });
}
// 关闭连接池
MySQLConnectionPool.prototype.close = function () {

}
// 创建SQL语句
exports.makeSQL = function (sql, options) {
    for (var k in options) {
        if (typeof options[k] != 'function') {
            //var key = "@" + k + "@";
            //sql = sql.replace(key, mysql.escape(options[k]));
            // modified by stephen wang 2015-12-02 for replace all
            var reg = new RegExp("@" + k + "@", "g");

            // add by kay 2016/5/4 字符串最后一位是$需要再添加一个$去转译
            if (typeof options[k] == 'string' && options[k].substr(options[k].length - 1, 1) == '$') {
                options[k] += '$';
            }
            // Simon 20160826 增加对日期类型的支持
            if (options[k] instanceof Date)
            {
                sql = sql.replace(reg, mysql.escape(options[k].format('yyyy-MM-dd hh:mm:ss')));
            }
            else if (options[k] instanceof Array){
                var val="";
                options[k].forEach(function(s){
                    val+=mysql.escape(s)+",";
                });
                val=val.substr(0,val.length-1);
                sql = sql.replace(reg, val);
            }
            else
            {
                sql = sql.replace(reg, mysql.escape(options[k]));
            }
        }
    }
    return sql;
}

// 创建SQL语句:Insert
exports.makeSQLInsert = function (table, items) {
    console.assert(typeof table == 'string', table);
    var sql = "INSERT INTO " + mysql.escapeId(table) + " (";
    var values = ") VALUES ";
    var valueString = '';
    var colarray = [];
    var colArray_escapeId = [];
    if (items instanceof (Array)) {
        // 多行插入模式
        for (var key in items[0]) {
            colarray.push(key);
            colArray_escapeId.push(mysql.escapeId(key));
        }
        for (var i = 0; i < items.length; i++) {
            var value = convertObjectToSQLStringArray(items[i], colarray).join(',');
            valueString += '(' + value + '),';
        }
        sql += colArray_escapeId.join(',') + values + valueString.substr(0, valueString.length - 1) + ";";
    }
    else {
        // 单行插入模式
        for (var key in items) {
            colarray.push(key);
            colArray_escapeId.push(mysql.escapeId(key));
        }
        valueString += convertObjectToSQLStringArray(items, colarray).join(',');
        sql += colArray_escapeId.join(',') + values + '(' + valueString + ");";
    }
    return sql;
}
// 创建SQL语句:Update
/**
 *
 * @param table 表名
 * @param items 需要更新的字段及新值{col:newvalue,colb:valueb}
 * @param where
 * @returns {string}
 */
exports.makeSQLUpdate = function (table, items, where) {
    console.assert(typeof table == 'string', table);
    var sql = "UPDATE " + mysql.escapeId(table) + " SET " + convertObjectToSQLStringKV(items, '=', ',');
    if (where) {
        sql += ' WHERE ' + convertObjectToSQLStringKV(where, '=', 'AND');
    }
    return sql;
}
// 创建SQL语句:Select
exports.makeSQLSelect = function (table, columns, where) {
    console.assert(typeof table == 'string', table);
    var col = '';
    if (columns instanceof (Array)) {
        // 给所有列加引号
        for (var i=0;i<columns.length;++i)
        {
            // 如果是* 全部字段，不需要加·字符
            if (columns[i] != '*') {
                columns[i] = mysql.escapeId(columns[i]);
            }
        }
        col = columns.join(',');
    }
    else
    {
        sc.assert((typeof columns != 'string' || !columns), " invalid columns:"+JSON.stringify(columns));
        col = mysql.escapeId(columns);
    }
    var sql = "SELECT " + col + " FROM " + mysql.escapeId(table);
    if (where) {
        sql += ' WHERE ' + convertObjectToSQLStringKV(where, '=', 'AND');
    }
    return sql;
}
// 创建SQL语句:Delete
exports.makeSQLDelete = function (table, where) {
    console.assert(typeof table == 'string', table);
    var sql = "DELETE FROM " + mysql.escapeId(table)
    if (where) {
        sql += ' WHERE ' + convertObjectToSQLStringKV(where, '=', 'AND');
    }
    return sql;
}
// 创建SQL连接
exports.createMySQLConnection = function (opt) {
    return new MySQLConnection(opt);
}
// 创建SQL连接池
exports.createMySQLConnectionPool = function (opt, max) {
    if (!opt) return null;
    return new MySQLConnectionPool(opt);
}

exports.escape = mysql.escape;




